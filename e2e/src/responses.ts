import { expect } from 'vitest';

export const errorDto = {
  unauthorized: {
    error: 'Unauthorized',
    statusCode: 401,
    message: 'Authentication required',
  },
  forbidden: {
    error: 'Forbidden',
    statusCode: 403,
    message: expect.any(String),
  },
  wrongPassword: {
    error: 'Bad Request',
    statusCode: 400,
    message: 'Wrong password',
  },
  invalidToken: {
    error: 'Unauthorized',
    statusCode: 401,
    message: 'Invalid user token',
  },
  invalidShareKey: {
    error: 'Unauthorized',
    statusCode: 401,
    message: 'Invalid share key',
  },
  invalidSharePassword: {
    error: 'Unauthorized',
    statusCode: 401,
    message: 'Invalid password',
  },
  badRequest: (message: any = null) => ({
    error: 'Bad Request',
    statusCode: 400,
    message: message ?? expect.anything(),
  }),
  noPermission: {
    error: 'Bad Request',
    statusCode: 400,
    message: expect.stringContaining('Not found or no'),
  },
  incorrectLogin: {
    error: 'Unauthorized',
    statusCode: 401,
    message: 'Incorrect email or password',
  },
  alreadyHasAdmin: {
    error: 'Bad Request',
    statusCode: 400,
    message: 'The server already has an admin',
  },
  noDeleteUploadLibrary: {
    error: 'Bad Request',
    statusCode: 400,
    message: 'Cannot delete the last upload library',
  },
};

export const signupResponseDto = {
  admin: {
    avatarColor: expect.any(String),
    id: expect.any(String),
    name: 'Immich Admin',
    email: 'admin@immich.cloud',
    storageLabel: 'admin',
    profileImagePath: '',
    // why? lol
    shouldChangePassword: true,
    isAdmin: true,
    createdAt: expect.any(String),
    updatedAt: expect.any(String),
    deletedAt: null,
    oauthId: '',
    memoriesEnabled: true,
    quotaUsageInBytes: 0,
    quotaSizeInBytes: null,
    status: 'active',
    permissions: [
      'activity.create',
      'activity.read',
      'activity.update',
      'activity.delete',
      'album.create',
      'album.read',
      'album.update',
      'album.delete',
      'asset.create',
      'asset.read',
      'asset.update',
      'asset.delete',
      'apiKey.create',
      'apiKey.read',
      'apiKey.update',
      'apiKey.delete',
      'authDevice.create',
      'authDevice.read',
      'authDevice.update',
      'authDevice.delete',
      'face.create',
      'face.read',
      'face.update',
      'face.delete',
      'library.create',
      'library.read',
      'library.update',
      'library.delete',
      'memory.create',
      'memory.read',
      'memory.update',
      'memory.delete',
      'memory.addAsset',
      'memory.removeAsset',
      'partner.create',
      'partner.read',
      'partner.update',
      'partner.delete',
      'person.create',
      'person.read',
      'person.update',
      'person.delete',
      'report.create',
      'report.read',
      'report.update',
      'report.delete',
      'sharedLink.create',
      'sharedLink.read',
      'sharedLink.update',
      'sharedLink.delete',
      'systemConfig.read',
      'systemConfig.update',
      'systemConfig.delete',
      'stack.create',
      'stack.read',
      'stack.update',
      'stack.delete',
      'tag.create',
      'tag.read',
      'tag.update',
      'tag.delete',
      'user.create',
      'user.read',
      'user.update',
      'user.delete',
      'auth.changePassword',
      'auth.oauth',
      'album.addAsset',
      'album.removeAsset',
      'album.addUser',
      'album.removeUser',
      'asset.viewThumb',
      'asset.viewPreview',
      'asset.viewOriginal',
      'asset.upload',
      'asset.download',
      'job.read',
      'job.run',
      'map.read',
      'user.readSimple',
      'user.changePassword',
      'server.read',
      'server.setup',
    ],
  },
};

export const loginResponseDto = {
  admin: {
    accessToken: expect.any(String),
    name: 'Immich Admin',
    isAdmin: true,
    profileImagePath: '',
    shouldChangePassword: true,
    userEmail: 'admin@immich.cloud',
    userId: expect.any(String),
  },
};
export const deviceDto = {
  current: {
    id: expect.any(String),
    createdAt: expect.any(String),
    updatedAt: expect.any(String),
    current: true,
    deviceOS: '',
    deviceType: '',
  },
};
